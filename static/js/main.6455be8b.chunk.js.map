{"version":3,"sources":["faceImages/nice_blank_eyes.png","faceImages sync nonrecursive /.(png|jpe?g|svg)$","faceImages/at_reaction.png","faceImages/blank_eyes.png","faceImages/blank_joy.png","faceImages/lasagna_face.png","faceImages sync /^/.*/.json$","Renderer.js","Canvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","getTextureShaderProgram","gl","shaderProgram","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","initShaderProgram","program","attribLocations","vertexPosition","getAttribLocation","textureCoord","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","uSampler","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","crossOrigin","src","value","drawScene","programInfo","buffers","scale","translate","rotation","flip","mat4","glMatrix","create","rotateZ","type","FLOAT","bindBuffer","ARRAY_BUFFER","position","vertexAttribPointer","enableVertexAttribArray","ELEMENT_ARRAY_BUFFER","indices","useProgram","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","UNSIGNED_SHORT","drawElements","TRIANGLES","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","Canvas","state","document","querySelector","getContext","premultipliedAlpha","this","rafHandle","raf","renderGlScene","bind","renderer","positionBuffer","createBuffer","bufferData","Float32Array","STATIC_DRAW","textureCoordBuffer","tintTextureCoordBuffer","DYNAMIC_DRAW","indexBuffer","Uint16Array","tintTextureCoord","bgTexture","props","backgroundImage","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","oldProps","updateSrcTexture","updateBackgroundTexture","srcTexture","programs","clearColor","clearDepth","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","behindTemplate","x","xOffset","y","yOffset","scaleX","scaleY","srcAspectRatio","mirrorXLeft","mirrorLeft","mirrorXRight","mirrorRight","rotationLeft","rotationRight","twoImages","Component","images","defaults","App","blankEyes","aspectRatio","eyesSettings","blankEyesDefaults","imageSourceType","onImageSourceAvailable","setState","builtinImageChosen","onSelectImage","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","onSelectBGFile","require","forEach","key","jsonFile","substring","lastIndexOf","push","className","style","display","flexDirection","flexGrow","scaleFactor","Math","PI","twoEyes","listStyleType","imageTitle","border","onChange","onClick","padding","axis","xmin","xmax","p","checked","mirrorRightEye","mirrorLeftEye","justifyContent","paddingTop","i","onPick","alignSelf","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6455be8b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nice_blank_eyes.3c4c32b9.png\";","var map = {\n\t\"./at_reaction.png\": 66,\n\t\"./blank_eyes.png\": 67,\n\t\"./blank_joy.png\": 68,\n\t\"./lasagna_face.png\": 69,\n\t\"./nice_blank_eyes.png\": 11\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 65;","module.exports = __webpack_public_path__ + \"static/media/at_reaction.d0f245c6.png\";","module.exports = __webpack_public_path__ + \"static/media/blank_eyes.6585e257.png\";","module.exports = __webpack_public_path__ + \"static/media/blank_joy.d7309f23.png\";","module.exports = __webpack_public_path__ + \"static/media/lasagna_face.1b36eb6a.png\";","var map = {\n\t\"./at_reaction.json\": 71,\n\t\"./blank_eyes.json\": 72,\n\t\"./blank_joy.json\": 73,\n\t\"./lasagna_face.json\": 74,\n\t\"./nice_blank_eyes.json\": 12\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 70;","import * as glMatrix from 'gl-matrix'\r\nimport { matcherHint } from 'jest-matcher-utils';\r\n\r\n//\r\n// initBuffers\r\n//\r\n// Initialize the buffers we'll need. For this demo, we just\r\n// have one object -- a simple two-dimensional square.\r\n//\r\nexport function initBuffers(gl) {\r\n\r\n  // Create a buffer for the square's positions.\r\n\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  // Select the positionBuffer as the one to apply buffer\r\n  // operations to from here out.\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  // Now create an array of positions for the square.\r\n\r\n  const positions = [\r\n     1.0,  1.0,\r\n    -1.0,  1.0,\r\n    -1.0, -1.0,\r\n     1.0, -1.0,\r\n  ];\r\n\r\n  // Now pass the list of positions into WebGL to build the\r\n  // shape. We do this by creating a Float32Array from the\r\n  // JavaScript array, then use it to fill the current buffer.\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(positions),\r\n                gl.STATIC_DRAW);\r\n\r\n  const textureCoordBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n\r\n  const textureCoordinates = [\r\n    // Front\r\n    1.0,  0.0,\r\n    0.0,  0.0,\r\n    0.0,  1.0,\r\n    1.0,  1.0,\r\n  ];\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates),\r\n                gl.STATIC_DRAW);\r\n\r\n  const tintTextureCoordBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, tintTextureCoordBuffer);\r\n\r\n  const tintTextureCoordinates = [\r\n    // Front\r\n    1.0,  0.0,\r\n    0.0,  0.0,\r\n    0.0,  1.0,\r\n    1.0,  1.0,\r\n  ];\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tintTextureCoordinates), gl.DYNAMIC_DRAW);\r\n\r\n  // Build the element array buffer; this specifies the indices\r\n  // into the vertex arrays for each face's vertices.\r\n\r\n  const indexBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n  const indices = [\r\n    0, 1, 2,    2, 3, 0,\r\n  ];\r\n\r\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\r\n    new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n  return {\r\n    position: positionBuffer,\r\n    textureCoord: textureCoordBuffer,\r\n    tintTextureCoord: tintTextureCoordBuffer,\r\n    indices: indexBuffer,\r\n  };\r\n}\r\n\r\nexport function updateTextureCoordinates(gl, textureCoordBuffer, coordinates) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coordinates), gl.DYNAMIC_DRAW);\r\n}\r\n\r\nexport function getTextureShaderProgram(gl) {\r\n  // Vertex shader program\r\n      \r\n  const vsSource = `\r\n  attribute vec4 aVertexPosition;\r\n  attribute vec2 aTextureCoord;\r\n\r\n  uniform mat4 uModelViewMatrix;\r\n  uniform mat4 uProjectionMatrix;\r\n\r\n  varying highp vec2 vTextureCoord;\r\n\r\n  void main(void) {\r\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n    vTextureCoord = aTextureCoord;\r\n  }\r\n  `;\r\n\r\n  // Fragment shader program\r\n\r\n  const fsSource = `\r\n    precision highp float;\r\n\r\n    varying highp vec2 vTextureCoord;\r\n\r\n    uniform sampler2D uSampler;\r\n\r\n    void main(void) {\r\n      gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n      gl_FragColor.rgb *= gl_FragColor.a;\r\n    }\r\n  `;\r\n\r\n  // Initialize a shader program; this is where all the lighting\r\n  // for the vertices and so forth is established.\r\n  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n  // Collect all the info needed to use the shader program.\r\n  // Look up which attribute our shader program is using\r\n  // for aVertexPosition and look up uniform locations.\r\n  return {\r\n    program: shaderProgram,\r\n    attribLocations: {\r\n      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n      textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord'),\r\n    },\r\n    uniformLocations: {\r\n      projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n      modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\r\n      uSampler: gl.getUniformLocation(shaderProgram, 'uSampler'),\r\n    },\r\n  };\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be download over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n                width, height, border, srcFormat, srcType,\r\n                pixel);\r\n\r\n  const image = new Image();\r\n  image.onload = function() {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n                  srcFormat, srcType, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n       // Yes, it's a power of 2. Generate mips.\r\n       gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n       // No, it's not a power of 2. Turn off mips and set\r\n       // wrapping to clamp to edge\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.crossOrigin = \"\";\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value) {\r\n  return (value & (value - 1)) == 0;\r\n}\r\n\r\nexport function drawStart(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nexport function drawScene(gl, programInfo, buffers, texture, scale, translate, rotation, flip) {\r\n  // Create a perspective matrix, a special matrix that is\r\n  // used to simulate the distortion of perspective in a camera.\r\n  // Our field of view is 45 degrees, with a width/height\r\n  // ratio that matches the display size of the canvas\r\n  // and we only want to see objects between 0.1 units\r\n  // and 100 units away from the camera.\r\n\r\n  var mat4 = glMatrix.mat4;\r\n\r\n  // const fieldOfView = 45 * Math.PI / 180;   // in radians\r\n  // const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n  // const zNear = 0.1;\r\n  // const zFar = 100.0;\r\n  const projectionMatrix = mat4.create();\r\n\r\n  // note: glmatrix.js always has the first argument\r\n  // as the destination to receive the result.\r\n  // mat4.perspective(projectionMatrix,\r\n  //                  fieldOfView,\r\n  //                  aspect,\r\n  //                  zNear,\r\n  //                  zFar);\r\n\r\n  // Set the drawing position to the \"identity\" point, which is\r\n  // the center of the scene.\r\n  const modelViewMatrix = mat4.create();\r\n\r\n  // Now move the drawing position a bit to where we want to\r\n  // start drawing the square.\r\n\r\n  \r\n\r\n  mat4.translate(modelViewMatrix, modelViewMatrix, translate); \r\n\r\n  mat4.scale(modelViewMatrix, modelViewMatrix, flip);\r\n\r\n  mat4.rotateZ(modelViewMatrix, modelViewMatrix, rotation);\r\n\r\n  mat4.scale(modelViewMatrix, modelViewMatrix, scale);\r\n\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const numComponents = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n  }\r\n\r\n  // Tell WebGL how to pull out the texture coordinates from\r\n  // the texture coordinate buffer into the textureCoord attribute.\r\n  {\r\n    const numComponents = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.textureCoord,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.textureCoord);\r\n  }\r\n\r\n  // Tell WebGL which indices to use to index the vertices\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(programInfo.program);\r\n\r\n  // Set the shader uniforms\r\n\r\n  gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n  gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);\r\n\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.uniform1i(programInfo.uniformLocations.uSampler, 0);\r\n\r\n  {\r\n    const offset = 0;\r\n    const vertexCount = 6;\r\n    const type = gl.UNSIGNED_SHORT;\r\n    gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n  }\r\n}\r\n\r\n//\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\n//\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n  // Create the shader program\r\n\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n\r\n  // If creating the shader program failed, alert\r\n\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n\r\n  return shaderProgram;\r\n}\r\n\r\n//\r\n// creates a shader of the given type, uploads the source and\r\n// compiles it.\r\n//\r\nexport function loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n\r\n  // Send the source to the shader object\r\n\r\n  gl.shaderSource(shader, source);\r\n\r\n  // Compile the shader program\r\n\r\n  gl.compileShader(shader);\r\n\r\n  // See if it compiled successfully\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n","import React, { Component } from 'react';\r\nimport raf from 'raf';\r\nimport * as renderer from './Renderer'\r\n \r\nexport default class Canvas extends Component {\r\n\r\n  state = {\r\n  }\r\n \r\n  componentDidMount() {\r\n      const canvas = document.querySelector('#glcanvas');\r\n      const gl = canvas.getContext('webgl', {premultipliedAlpha: false});\r\n\r\n        // If we don't have a GL context, give up now\r\n        if (!gl) {\r\n          alert('Unable to initialize WebGL. Your browser or machine may not support it.');\r\n          return;\r\n        }\r\n\r\n        this.rafHandle = raf(this.renderGlScene.bind(this, gl));\r\n\r\n        this.programInfo = renderer.getTextureShaderProgram(gl);\r\n      \r\n        // Here's where we call the routine that builds all the\r\n        // objects we'll be drawing.\r\n        this.buffers = renderer.initBuffers(gl);\r\n      \r\n        this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\r\n      \r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n      if (oldProps.src != this.props.src) {\r\n        this.updateSrcTexture();\r\n      }\r\n\r\n      if (oldProps.backgroundImage != this.props.backgroundImage) {\r\n        this.updateBackgroundTexture();\r\n      }\r\n    }\r\n\r\n    updateBackgroundTexture() {\r\n      const canvas = document.querySelector('#glcanvas');\r\n      const gl = canvas.getContext('webgl');\r\n\r\n      this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\r\n    }\r\n\r\n    updateSrcTexture() {\r\n      var src = this.props.src;\r\n      if (src != null) {\r\n        const canvas = document.querySelector('#glcanvas');\r\n        const gl = canvas.getContext('webgl');\r\n\r\n        this.srcTexture = renderer.loadTexture(gl, src, gl.LINEAR);\r\n      } else {\r\n        this.srcTexture = null;\r\n      }\r\n    }\r\n \r\n    renderGlScene(gl, programs) {\r\n      renderer.drawStart(gl);\r\n\r\n      if (!this.props.behindTemplate) {\r\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.bgTexture, [1.0, 1.0, 1.0], [0, 0, 0], 0, [1.0, 1.0, 1.0]);\r\n      }\r\n\r\n      if (this.srcTexture) {\r\n        var x = this.props.xOffset;\r\n        var y = this.props.yOffset;\r\n\r\n        var scaleX = this.props.scale;\r\n        var scaleY = this.props.scale;\r\n        if (this.props.srcAspectRatio < 1) {\r\n          scaleX = scaleX * this.props.srcAspectRatio;\r\n        } else if (this.props.srcAspectRatio > 1) {\r\n          scaleY = scaleY * 1/this.props.srcAspectRatio;\r\n        }\r\n\r\n        var mirrorXLeft = this.props.mirrorLeft ? -1.0 : 1.0;\r\n        var mirrorXRight = this.props.mirrorRight ? -1.0 : 1.0;\r\n\r\n        var rotationLeft = this.props.mirrorLeft ? -this.props.rotation : this.props.rotation;\r\n        var rotationRight = this.props.mirrorRight ? this.props.rotation : -this.props.rotation;\r\n\r\n        if (this.props.twoImages) {\r\n          renderer.drawScene(gl, this.programInfo, this.buffers, this.srcTexture, [scaleX, scaleY, 1.0], [-x, y, 0], rotationLeft, [mirrorXLeft, 1.0, 1.0]);\r\n        }\r\n\r\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.srcTexture, [scaleX, scaleY, 1.0], [x, y, 0], rotationRight, [mirrorXRight, 1.0, 1.0]);\r\n      }\r\n\r\n      if (this.props.behindTemplate) {\r\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.bgTexture, [1.0, 1.0, 1.0], [0, 0, 0], 0, [1.0, 1.0, 1.0]);\r\n      }\r\n\r\n      this.rafHandle = raf(this.renderGlScene.bind(this, gl, programs));\r\n  }\r\n \r\n    render() {\r\n        return (\r\n          <canvas id=\"glcanvas\" width=\"160\" height=\"160\"/>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Canvas from './Canvas';\r\nimport Slider from 'react-input-slider';\r\nimport ImagePicker from 'react-image-picker'\r\nimport 'react-image-picker/dist/index.css'\r\n\r\nimport blankEyes from './faceImages/nice_blank_eyes.png'\r\nimport blankEyesDefaults from './faceImages/nice_blank_eyes.json'\r\n\r\nvar images = [];\r\nvar defaults = [];\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    src: null,\r\n    backgroundImage:blankEyes,\r\n    aspectRatio:1,\r\n    eyesSettings: blankEyesDefaults,\r\n    imageSourceType:\"file\"\r\n  }\r\n\r\n  componentWillMount() {\r\n    var req = require.context('./faceImages/', false, /\\.(png|jpe?g|svg)$/);\r\n    var keys = req.keys(); // keys contains the file names eg \"./blank_eyes.png\"\r\n    images = keys.map(req);\r\n\r\n    keys.forEach(function(key) {\r\n      try {\r\n        var jsonFile = require('./faceImages/' + key.substring(2, key.lastIndexOf('.')) + '.json');\r\n        defaults.push(jsonFile);\r\n      } catch(e) {\r\n        defaults.push({});\r\n      }\r\n    });\r\n  }\r\n\r\n  onImageSourceAvailable = (src) => {\r\n    var image = new Image();\r\n\r\n    image.crossOrigin = \"\";\r\n    image.src = src;\r\n\r\n    image.onload = () => {\r\n      this.setState({src:src, aspectRatio: image.width / image.height})\r\n    };\r\n  } \r\n\r\n  builtinImageChosen = (image) => {\r\n    this.setState(state => ({backgroundImage:image.src, eyesSettings:{...state.eyesSettings, ...defaults[image.value]}}));\r\n  }\r\n\r\n  onSelectImage = (e) => {\r\n    if (this.state.imageSourceType == \"file\") {\r\n      if (e.target.files && e.target.files.length > 0) {\r\n        const reader = new FileReader()\r\n        reader.addEventListener(\r\n          'load',\r\n          () =>\r\n          {\r\n            this.onImageSourceAvailable(reader.result);\r\n          },\r\n          false\r\n        )\r\n        reader.readAsDataURL(e.target.files[0])\r\n      }\r\n    }\r\n    else {\r\n      this.onImageSourceAvailable(\"https://cors-anywhere.herokuapp.com/\" + e.target.value);\r\n    }\r\n  }\r\n\r\n  onSelectBGFile = e => {\r\n    if (e.target.files && e.target.files.length > 0) {\r\n      const reader = new FileReader()\r\n      reader.addEventListener(\r\n        'load',\r\n        () =>\r\n        {\r\n          var image = new Image();\r\n\r\n          image.src = reader.result;\r\n\r\n          image.onload = () => {\r\n              this.setState({\r\n                backgroundImage: reader.result,\r\n              })\r\n          };\r\n        },\r\n        false\r\n      )\r\n      reader.readAsDataURL(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Top\" style={{height:\"100%\", display:\"flex\", flexDirection:\"column\"}}>\r\n        <div className=\"App\" style={{flexGrow:2}}>\r\n          <div>Emoji Workflow<br/>\r\n            <Canvas\r\n              backgroundImage={this.state.backgroundImage}\r\n              src={this.state.src}\r\n              srcAspectRatio={this.state.aspectRatio}\r\n              xOffset={this.state.eyesSettings.xOffset / 100}\r\n              yOffset={this.state.eyesSettings.yOffset / 100}\r\n              scale={this.state.eyesSettings.scaleFactor / 100}\r\n              rotation={this.state.eyesSettings.rotation * Math.PI / 180}\r\n              mirrorRight={this.state.eyesSettings.mirrorRight}\r\n              mirrorLeft={this.state.eyesSettings.mirrorLeft}\r\n              twoImages={this.state.eyesSettings.twoEyes}\r\n              behindTemplate={this.state.eyesSettings.behindTemplate}\r\n            />\r\n          </div>\r\n          <div className=\"AppSmall\">\r\n              <ul style={{listStyleType: \"none\"}}>\r\n                <li>{this.state.eyesSettings.imageTitle}:</li>\r\n                <li><img src={this.state.src} style={this.state.src ? {height:100, border:\"1px solid white\"} : {height:100, width:100, border:\"1px solid white\"}}/></li>\r\n                <li><input type={this.state.imageSourceType} onChange={this.onSelectImage}/></li>\r\n                <div>\r\n                  <button onClick={() => { this.setState({imageSourceType: \"file\"}) }}>File</button>\r\n                  &nbsp;\r\n                  <button onClick={() => { this.setState({imageSourceType: \"url\"}) }}>Url</button>\r\n                </div>\r\n              </ul>\r\n          </div>\r\n          \r\n          <div style={{padding: \"50px\"}}>\r\n              X Offset: {this.state.eyesSettings.xOffset}%<br/>\r\n              <Slider axis=\"x\" x={this.state.eyesSettings.xOffset} xmin={-100} xmax={100} onChange={({x}) => this.setState(p => ({eyesSettings: {...p.eyesSettings, xOffset:x}}))}/><br/>\r\n              Y Offset: {this.state.eyesSettings.yOffset}%<br/>\r\n              <Slider axis=\"x\" x={this.state.eyesSettings.yOffset} xmin={-100} xmax={100} onChange={({x}) => this.setState(p => ({eyesSettings: {...p.eyesSettings, yOffset:x}}))}/><br/>\r\n              Scale: {this.state.eyesSettings.scaleFactor}%<br/>\r\n              <Slider axis=\"x\" x={this.state.eyesSettings.scaleFactor} xmin={0} xmax={200} onChange={({x}) => this.setState(p => ({eyesSettings: {...p.eyesSettings, scaleFactor:x}}))}/><br/>\r\n              Rotation:  {this.state.eyesSettings.rotation}&deg;<br/>\r\n              <Slider axis=\"x\" x={this.state.eyesSettings.rotation} xmin={-90} xmax={90} onChange={({x}) => this.setState(p => ({eyesSettings: {...p.eyesSettings, rotation:x}}))}/><br/>\r\n              Mirror Right: <input type=\"checkbox\" checked={this.state.eyesSettings.mirrorRightEye} onChange={(e) => { var target = e.target; this.setState(p => ({eyesSettings: {...p.eyesSettings, mirrorRightEye:target.checked}}))}}/><br/>\r\n              {this.state.eyesSettings.twoEyes &&\r\n                <p>Mirror Left: <input type=\"checkbox\" checked={this.state.eyesSettings.mirrorLeftEye} onChange={(e) => { var target = e.target; this.setState((p) => ({eyesSettings: {...p.eyesSettings, mirrorLeftEye:target.checked}}))}}/></p>\r\n              }\r\n          </div>\r\n        </div>\r\n        <div className=\"App\">\r\n          <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\"}}>\r\n            <div className=\"App\" style={{paddingTop:30}}>\r\n              Choose a background image:<br/>\r\n              <ImagePicker\r\n                images={images.map((image, i) => ({src: image, value: i}))}\r\n                onPick={this.builtinImageChosen}/>\r\n            </div>\r\n            <div className=\"AppSmall\">\r\n              Or choose a custom image:&nbsp;&nbsp;<input type=\"file\" onChange={this.onSelectBGFile} style={{alignSelf:'top'}}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"Footer\" style={{height:40}}>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}