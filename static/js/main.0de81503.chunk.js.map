{"version":3,"sources":["faceImages/blank_eyes.png","at_reaction.png","faceImages sync nonrecursive /.(png|jpe?g|svg)$","faceImages/blank_joy.png","faceImages/lasagna_face.png","faceImages/nice_blank_eyes.png","Renderer.js","Canvas.js","CanvasAtReaction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","initBuffers","gl","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","textureCoordBuffer","tintTextureCoordBuffer","DYNAMIC_DRAW","indexBuffer","ELEMENT_ARRAY_BUFFER","Uint16Array","position","textureCoord","tintTextureCoord","indices","getTextureShaderProgram","shaderProgram","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","initShaderProgram","program","attribLocations","vertexPosition","getAttribLocation","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","uSampler","loadTexture","url","texture","createTexture","bindTexture","TEXTURE_2D","internalFormat","RGBA","srcFormat","srcType","UNSIGNED_BYTE","pixel","Uint8Array","texImage2D","image","Image","onload","isPowerOf2","width","height","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","crossOrigin","src","value","drawStart","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawScene","programInfo","buffers","scale","translate","rotation","mat4","glMatrix","create","rotateZ","type","FLOAT","vertexAttribPointer","enableVertexAttribArray","useProgram","uniformMatrix4fv","activeTexture","TEXTURE0","uniform1i","UNSIGNED_SHORT","drawElements","TRIANGLES","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","Canvas","state","document","querySelector","getContext","premultipliedAlpha","this","rafHandle","raf","renderGlScene","bind","renderer","bgTexture","props","backgroundImage","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","oldProps","eyeSrc","updateEyeTexture","updateBackgroundTexture","eyeTexture","programs","x","eyeXOffset","y","eyeYOffset","scaleX","eyeScaleFactor","scaleY","eyeSrcAspectRatio","scaleXLeft","mirrorLeftEye","scaleXRight","mirrorRightEye","rotationLeft","eyeRotation","rotationRight","Component","atReactionTexture","atReaction","aspectRatio","images","App","eyesSrc","blankEyes","atReactionSrc","atReactionAspectRatio","yOffset","xOffset","scaleFactor","imageSourceType","onImageSourceAvailable","newState","console","log","setState","onSelectImage","target","files","length","reader","FileReader","addEventListener","result","readAsDataURL","r","importAll","require","classname","className","Math","PI","style","listStyleType","onChange","onClick","maxHeight","padding","axis","xmin","xmax","checked","i","onPick","onSelectBGFile","alignSelf","class","React","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0de81503.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blank_eyes.6585e257.png\";","module.exports = __webpack_public_path__ + \"static/media/at_reaction.4dac6faf.png\";","var map = {\n\t\"./blank_eyes.png\": 12,\n\t\"./blank_joy.png\": 65,\n\t\"./lasagna_face.png\": 66,\n\t\"./nice_blank_eyes.png\": 67\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 64;","module.exports = __webpack_public_path__ + \"static/media/blank_joy.d7309f23.png\";","module.exports = __webpack_public_path__ + \"static/media/lasagna_face.1b36eb6a.png\";","module.exports = __webpack_public_path__ + \"static/media/nice_blank_eyes.3c4c32b9.png\";","import * as glMatrix from 'gl-matrix'\r\nimport { matcherHint } from 'jest-matcher-utils';\r\n\r\n//\r\n// initBuffers\r\n//\r\n// Initialize the buffers we'll need. For this demo, we just\r\n// have one object -- a simple two-dimensional square.\r\n//\r\nexport function initBuffers(gl) {\r\n\r\n  // Create a buffer for the square's positions.\r\n\r\n  const positionBuffer = gl.createBuffer();\r\n\r\n  // Select the positionBuffer as the one to apply buffer\r\n  // operations to from here out.\r\n\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\r\n\r\n  // Now create an array of positions for the square.\r\n\r\n  const positions = [\r\n     1.0,  1.0,\r\n    -1.0,  1.0,\r\n    -1.0, -1.0,\r\n     1.0, -1.0,\r\n  ];\r\n\r\n  // Now pass the list of positions into WebGL to build the\r\n  // shape. We do this by creating a Float32Array from the\r\n  // JavaScript array, then use it to fill the current buffer.\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER,\r\n                new Float32Array(positions),\r\n                gl.STATIC_DRAW);\r\n\r\n  const textureCoordBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n\r\n  const textureCoordinates = [\r\n    // Front\r\n    1.0,  0.0,\r\n    0.0,  0.0,\r\n    0.0,  1.0,\r\n    1.0,  1.0,\r\n  ];\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates),\r\n                gl.STATIC_DRAW);\r\n\r\n  const tintTextureCoordBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, tintTextureCoordBuffer);\r\n\r\n  const tintTextureCoordinates = [\r\n    // Front\r\n    1.0,  0.0,\r\n    0.0,  0.0,\r\n    0.0,  1.0,\r\n    1.0,  1.0,\r\n  ];\r\n\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(tintTextureCoordinates), gl.DYNAMIC_DRAW);\r\n\r\n  // Build the element array buffer; this specifies the indices\r\n  // into the vertex arrays for each face's vertices.\r\n\r\n  const indexBuffer = gl.createBuffer();\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);\r\n\r\n  const indices = [\r\n    0, 1, 2,    2, 3, 0,\r\n  ];\r\n\r\n  gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,\r\n    new Uint16Array(indices), gl.STATIC_DRAW);\r\n\r\n  return {\r\n    position: positionBuffer,\r\n    textureCoord: textureCoordBuffer,\r\n    tintTextureCoord: tintTextureCoordBuffer,\r\n    indices: indexBuffer,\r\n  };\r\n}\r\n\r\nexport function updateTextureCoordinates(gl, textureCoordBuffer, coordinates) {\r\n  gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);\r\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(coordinates), gl.DYNAMIC_DRAW);\r\n}\r\n\r\nexport function getTextureShaderProgram(gl) {\r\n  // Vertex shader program\r\n      \r\n  const vsSource = `\r\n  attribute vec4 aVertexPosition;\r\n  attribute vec2 aTextureCoord;\r\n\r\n  uniform mat4 uModelViewMatrix;\r\n  uniform mat4 uProjectionMatrix;\r\n\r\n  varying highp vec2 vTextureCoord;\r\n\r\n  void main(void) {\r\n    gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n    vTextureCoord = aTextureCoord;\r\n  }\r\n  `;\r\n\r\n  // Fragment shader program\r\n\r\n  const fsSource = `\r\n    precision highp float;\r\n\r\n    varying highp vec2 vTextureCoord;\r\n\r\n    uniform sampler2D uSampler;\r\n\r\n    void main(void) {\r\n      gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n      gl_FragColor.rgb *= gl_FragColor.a;\r\n    }\r\n  `;\r\n\r\n  // Initialize a shader program; this is where all the lighting\r\n  // for the vertices and so forth is established.\r\n  const shaderProgram = initShaderProgram(gl, vsSource, fsSource);\r\n\r\n  // Collect all the info needed to use the shader program.\r\n  // Look up which attribute our shader program is using\r\n  // for aVertexPosition and look up uniform locations.\r\n  return {\r\n    program: shaderProgram,\r\n    attribLocations: {\r\n      vertexPosition: gl.getAttribLocation(shaderProgram, 'aVertexPosition'),\r\n      textureCoord: gl.getAttribLocation(shaderProgram, 'aTextureCoord'),\r\n    },\r\n    uniformLocations: {\r\n      projectionMatrix: gl.getUniformLocation(shaderProgram, 'uProjectionMatrix'),\r\n      modelViewMatrix: gl.getUniformLocation(shaderProgram, 'uModelViewMatrix'),\r\n      uSampler: gl.getUniformLocation(shaderProgram, 'uSampler'),\r\n    },\r\n  };\r\n}\r\n\r\n//\r\n// Initialize a texture and load an image.\r\n// When the image finished loading copy it into the texture.\r\n//\r\nexport function loadTexture(gl, url) {\r\n  const texture = gl.createTexture();\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n  // Because images have to be download over the internet\r\n  // they might take a moment until they are ready.\r\n  // Until then put a single pixel in the texture so we can\r\n  // use it immediately. When the image has finished downloading\r\n  // we'll update the texture with the contents of the image.\r\n  const level = 0;\r\n  const internalFormat = gl.RGBA;\r\n  const width = 1;\r\n  const height = 1;\r\n  const border = 0;\r\n  const srcFormat = gl.RGBA;\r\n  const srcType = gl.UNSIGNED_BYTE;\r\n  const pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue\r\n  gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n                width, height, border, srcFormat, srcType,\r\n                pixel);\r\n\r\n  const image = new Image();\r\n  image.onload = function() {\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texImage2D(gl.TEXTURE_2D, level, internalFormat,\r\n                  srcFormat, srcType, image);\r\n\r\n    // WebGL1 has different requirements for power of 2 images\r\n    // vs non power of 2 images so check if the image is a\r\n    // power of 2 in both dimensions.\r\n    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {\r\n       // Yes, it's a power of 2. Generate mips.\r\n       gl.generateMipmap(gl.TEXTURE_2D);\r\n    } else {\r\n       // No, it's not a power of 2. Turn off mips and set\r\n       // wrapping to clamp to edge\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n       gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n    }\r\n  };\r\n  image.crossOrigin = \"\";\r\n  image.src = url;\r\n\r\n  return texture;\r\n}\r\n\r\nfunction isPowerOf2(value) {\r\n  return (value & (value - 1)) == 0;\r\n}\r\n\r\nexport function drawStart(gl) {\r\n  gl.clearColor(0.0, 0.0, 0.0, 0.0);  // Clear to black, fully opaque\r\n  gl.clearDepth(1.0);                 // Clear everything\r\n  gl.enable(gl.DEPTH_TEST);           // Enable depth testing\r\n  gl.depthFunc(gl.LEQUAL);            // Near things obscure far things\r\n\r\n  // Clear the canvas before we start drawing on it.\r\n\r\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n}\r\n\r\nexport function drawScene(gl, programInfo, buffers, texture, scale, translate, rotation) {\r\n  // Create a perspective matrix, a special matrix that is\r\n  // used to simulate the distortion of perspective in a camera.\r\n  // Our field of view is 45 degrees, with a width/height\r\n  // ratio that matches the display size of the canvas\r\n  // and we only want to see objects between 0.1 units\r\n  // and 100 units away from the camera.\r\n\r\n  var mat4 = glMatrix.mat4;\r\n\r\n  // const fieldOfView = 45 * Math.PI / 180;   // in radians\r\n  // const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight;\r\n  // const zNear = 0.1;\r\n  // const zFar = 100.0;\r\n  const projectionMatrix = mat4.create();\r\n\r\n  // note: glmatrix.js always has the first argument\r\n  // as the destination to receive the result.\r\n  // mat4.perspective(projectionMatrix,\r\n  //                  fieldOfView,\r\n  //                  aspect,\r\n  //                  zNear,\r\n  //                  zFar);\r\n\r\n  // Set the drawing position to the \"identity\" point, which is\r\n  // the center of the scene.\r\n  const modelViewMatrix = mat4.create();\r\n\r\n  // Now move the drawing position a bit to where we want to\r\n  // start drawing the square.\r\n\r\n  mat4.translate(modelViewMatrix, modelViewMatrix, translate); \r\n\r\n  mat4.scale(modelViewMatrix, modelViewMatrix, scale);\r\n\r\n  mat4.rotateZ(modelViewMatrix, modelViewMatrix, rotation);\r\n\r\n  // Tell WebGL how to pull out the positions from the position\r\n  // buffer into the vertexPosition attribute.\r\n  {\r\n    const numComponents = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.vertexPosition,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.vertexPosition);\r\n  }\r\n\r\n  // Tell WebGL how to pull out the texture coordinates from\r\n  // the texture coordinate buffer into the textureCoord attribute.\r\n  {\r\n    const numComponents = 2;\r\n    const type = gl.FLOAT;\r\n    const normalize = false;\r\n    const stride = 0;\r\n    const offset = 0;\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffers.textureCoord);\r\n    gl.vertexAttribPointer(\r\n        programInfo.attribLocations.textureCoord,\r\n        numComponents,\r\n        type,\r\n        normalize,\r\n        stride,\r\n        offset);\r\n    gl.enableVertexAttribArray(\r\n        programInfo.attribLocations.textureCoord);\r\n  }\r\n\r\n  // Tell WebGL which indices to use to index the vertices\r\n  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\r\n\r\n  // Tell WebGL to use our program when drawing\r\n\r\n  gl.useProgram(programInfo.program);\r\n\r\n  // Set the shader uniforms\r\n\r\n  gl.uniformMatrix4fv(programInfo.uniformLocations.projectionMatrix, false, projectionMatrix);\r\n  gl.uniformMatrix4fv(programInfo.uniformLocations.modelViewMatrix, false, modelViewMatrix);\r\n\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_2D, texture);\r\n  gl.uniform1i(programInfo.uniformLocations.uSampler, 0);\r\n\r\n  {\r\n    const offset = 0;\r\n    const vertexCount = 6;\r\n    const type = gl.UNSIGNED_SHORT;\r\n    gl.drawElements(gl.TRIANGLES, vertexCount, type, offset);\r\n  }\r\n}\r\n\r\n//\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\n//\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n  const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n  const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n  // Create the shader program\r\n\r\n  const shaderProgram = gl.createProgram();\r\n  gl.attachShader(shaderProgram, vertexShader);\r\n  gl.attachShader(shaderProgram, fragmentShader);\r\n  gl.linkProgram(shaderProgram);\r\n\r\n  // If creating the shader program failed, alert\r\n\r\n  if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n    alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n    return null;\r\n  }\r\n\r\n  return shaderProgram;\r\n}\r\n\r\n//\r\n// creates a shader of the given type, uploads the source and\r\n// compiles it.\r\n//\r\nexport function loadShader(gl, type, source) {\r\n  const shader = gl.createShader(type);\r\n\r\n  // Send the source to the shader object\r\n\r\n  gl.shaderSource(shader, source);\r\n\r\n  // Compile the shader program\r\n\r\n  gl.compileShader(shader);\r\n\r\n  // See if it compiled successfully\r\n\r\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n    alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n    gl.deleteShader(shader);\r\n    return null;\r\n  }\r\n\r\n  return shader;\r\n}\r\n","import React, { Component } from 'react';\r\nimport raf from 'raf';\r\nimport * as renderer from './Renderer'\r\n \r\nexport default class Canvas extends Component {\r\n\r\n  state = {\r\n  }\r\n \r\n  componentDidMount() {\r\n      const canvas = document.querySelector('#glcanvas');\r\n      const gl = canvas.getContext('webgl', {premultipliedAlpha: false});\r\n\r\n        // If we don't have a GL context, give up now\r\n        if (!gl) {\r\n          alert('Unable to initialize WebGL. Your browser or machine may not support it.');\r\n          return;\r\n        }\r\n\r\n        this.rafHandle = raf(this.renderGlScene.bind(this, gl));\r\n\r\n        this.programInfo = renderer.getTextureShaderProgram(gl);\r\n      \r\n        // Here's where we call the routine that builds all the\r\n        // objects we'll be drawing.\r\n        this.buffers = renderer.initBuffers(gl);\r\n      \r\n        this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\r\n      \r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n      if (oldProps.eyeSrc != this.props.eyeSrc) {\r\n        this.updateEyeTexture();\r\n      }\r\n\r\n      if (oldProps.backgroundImage != this.props.backgroundImage) {\r\n        this.updateBackgroundTexture();\r\n      }\r\n    }\r\n\r\n    updateBackgroundTexture() {\r\n      const canvas = document.querySelector('#glcanvas');\r\n      const gl = canvas.getContext('webgl');\r\n\r\n      this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\r\n    }\r\n\r\n    updateEyeTexture() {\r\n      var eyeSrc = this.props.eyeSrc;\r\n      if (eyeSrc != null) {\r\n        const canvas = document.querySelector('#glcanvas');\r\n        const gl = canvas.getContext('webgl');\r\n\r\n        this.eyeTexture = renderer.loadTexture(gl, eyeSrc, gl.LINEAR);\r\n      } else {\r\n        this.eyeTexture = null;\r\n      }\r\n    }\r\n \r\n    renderGlScene(gl, programs) {\r\n      renderer.drawStart(gl);\r\n      renderer.drawScene(gl, this.programInfo, this.buffers, this.bgTexture, [1.0, 1.0, 1.0], [0, 0, 0], 0);\r\n\r\n      if (this.eyeTexture) {\r\n        var x = this.props.eyeXOffset;\r\n        var y = this.props.eyeYOffset;\r\n\r\n        var scaleX = this.props.eyeScaleFactor;\r\n        var scaleY = this.props.eyeScaleFactor;\r\n        if (this.props.eyeSrcAspectRatio < 1) {\r\n          scaleX = scaleX * this.props.eyeSrcAspectRatio;\r\n        } else if (this.props.eyeSrcAspectRatio > 1) {\r\n          scaleY = scaleY * 1/this.props.eyeSrcAspectRatio;\r\n        }\r\n\r\n        var scaleXLeft = this.props.mirrorLeftEye ? -scaleX : scaleX;\r\n        var scaleXRight = this.props.mirrorRightEye ? -scaleX : scaleX;\r\n\r\n        var rotationLeft = this.props.mirrorLeftEye ? this.props.eyeRotation : -this.props.eyeRotation;\r\n        var rotationRight = this.props.mirrorRightEye ? -this.props.eyeRotation : this.props.eyeRotation;\r\n\r\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.eyeTexture, [scaleXLeft, scaleY, 1.0], [-x, y, 0], rotationLeft);\r\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.eyeTexture, [scaleXRight, scaleY, 1.0], [x, y, 0], rotationRight);\r\n      }\r\n\r\n      this.rafHandle = raf(this.renderGlScene.bind(this, gl, programs));\r\n  }\r\n \r\n    render() {\r\n        return (\r\n          <canvas id=\"glcanvas\" width=\"160\" height=\"160\"/>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport raf from 'raf';\r\nimport * as renderer from './Renderer'\r\n\r\nimport atReaction from './at_reaction.png'\r\n \r\nexport default class Canvas extends Component {\r\n\r\n  state = {\r\n  }\r\n \r\n  componentDidMount() {\r\n      const canvas = document.querySelector('#glcanvas-atreaction');\r\n      const gl = canvas.getContext('webgl', {premultipliedAlpha: false});\r\n\r\n        // If we don't have a GL context, give up now\r\n        if (!gl) {\r\n          alert('Unable to initialize WebGL. Your browser or machine may not support it.');\r\n          return;\r\n        }\r\n\r\n        this.rafHandle = raf(this.renderGlScene.bind(this, gl));\r\n\r\n        this.programInfo = renderer.getTextureShaderProgram(gl);\r\n      \r\n        // Here's where we call the routine that builds all the\r\n        // objects we'll be drawing.\r\n        this.buffers = renderer.initBuffers(gl);\r\n      \r\n        //this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\r\n        this.atReactionTexture = renderer.loadTexture(gl, atReaction);\r\n      \r\n        gl.enable(gl.BLEND);\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n    }\r\n\r\n    componentDidUpdate(oldProps) {\r\n      if (oldProps.eyeSrc != this.props.eyeSrc) {\r\n        this.updateEyeTexture();\r\n      }\r\n\r\n      if (oldProps.backgroundImage != this.props.backgroundImage) {\r\n        this.updateBackgroundTexture();\r\n      }\r\n    }\r\n\r\n    updateBackgroundTexture() {\r\n      const canvas = document.querySelector('#glcanvas-atreaction');\r\n      const gl = canvas.getContext('webgl');\r\n\r\n      this.bgTexture = renderer.loadTexture(gl, this.props.backgroundImage)\r\n    }\r\n\r\n    updateEyeTexture() {\r\n      var eyeSrc = this.props.eyeSrc;\r\n      if (eyeSrc != null) {\r\n        const canvas = document.querySelector('#glcanvas-atreaction');\r\n        const gl = canvas.getContext('webgl');\r\n\r\n        this.eyeTexture = renderer.loadTexture(gl, eyeSrc, gl.LINEAR);\r\n      } else {\r\n        this.eyeTexture = null;\r\n      }\r\n    }\r\n \r\n    renderGlScene(gl, programs) {\r\n      renderer.drawStart(gl);\r\n\r\n      if (this.bgTexture != null) {\r\n        var scaleX = 1.0;\r\n        var scaleY = 1.0;\r\n        if (this.props.aspectRatio < 1) {\r\n          scaleX = scaleX * this.props.aspectRatio;\r\n        } else if (this.props.aspectRatio > 1) {\r\n          scaleY = scaleY * 1/this.props.aspectRatio;\r\n        }\r\n\r\n        renderer.drawScene(gl, this.programInfo, this.buffers, this.bgTexture, [scaleX, scaleY, 1.0], [0, 0, 0], 0);\r\n      }\r\n\r\n      renderer.drawScene(gl, this.programInfo, this.buffers, this.atReactionTexture, [.5, .5, 1.0], [-.5, -.6, 0], 0);\r\n\r\n      this.rafHandle = raf(this.renderGlScene.bind(this, gl, programs));\r\n  }\r\n \r\n    render() {\r\n        return (\r\n          <canvas id=\"glcanvas-atreaction\" width=\"160\" height=\"160\"/>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Canvas from './Canvas';\r\nimport CanvasAtReaction from './CanvasAtReaction'\r\nimport Slider from 'react-input-slider';\r\nimport ImagePicker from 'react-image-picker'\r\nimport 'react-image-picker/dist/index.css'\r\n\r\nimport blankEyes from './faceImages/blank_eyes.png'\r\n\r\nvar images = [];\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    eyesSrc: null,\r\n    backgroundImage:blankEyes,\r\n    aspectRatio:1,\r\n    atReactionSrc:null,\r\n    atReactionAspectRatio:1,\r\n    yOffset:0,\r\n    xOffset:0,\r\n    scaleFactor:100,\r\n    rotation:0,\r\n    mirrorRightEye:false,\r\n    mirrorLeftEye:false,\r\n    imageSourceType:\"file\"\r\n  }\r\n\r\n  importAll(r) {\r\n    return r.keys().map(r);\r\n  }\r\n  componentWillMount() {\r\n    images = this.importAll(require.context('./faceImages/', false, /\\.(png|jpe?g|svg)$/));\r\n  }\r\n\r\n  onImageSourceAvailable = (src, type) => {\r\n    var image = new Image();\r\n\r\n    image.crossOrigin = \"\";\r\n    image.src = src;\r\n\r\n    image.onload = () => {\r\n      var newState = {aspectRatio: image.width / image.height};\r\n      newState[type] = src;\r\n      console.log(type)\r\n      this.setState(newState)\r\n    };\r\n  } \r\n\r\n  onSelectImage = (type, e) => {\r\n    if (this.state.imageSourceType == \"file\") {\r\n      if (e.target.files && e.target.files.length > 0) {\r\n        const reader = new FileReader()\r\n        reader.addEventListener(\r\n          'load',\r\n          () =>\r\n          {\r\n            this.onImageSourceAvailable(reader.result, type);\r\n          },\r\n          false\r\n        )\r\n        reader.readAsDataURL(e.target.files[0])\r\n      }\r\n    }\r\n    else {\r\n      this.onImageSourceAvailable(e.target.value, type);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div classname=\"Top\">\r\n        <div className=\"App\">\r\n          <div>Emoji Workflow<br/>\r\n            <Canvas\r\n              backgroundImage={this.state.backgroundImage}\r\n              eyeSrc={this.state.eyesSrc}\r\n              eyeSrcAspectRatio={this.state.aspectRatio}\r\n              eyeXOffset={this.state.xOffset / 100}\r\n              eyeYOffset={this.state.yOffset / 100}\r\n              eyeScaleFactor={this.state.scaleFactor / 100}\r\n              eyeRotation={this.state.rotation * Math.PI / 180}\r\n              mirrorRightEye={this.state.mirrorRightEye}\r\n              mirrorLeftEye={this.state.mirrorLeftEye}\r\n            />\r\n          </div>\r\n          <div style={{}}>\r\n              <ul style={{listStyleType: \"none\"}}>\r\n                <li><input type={this.state.imageSourceType} onChange={this.onSelectImage.bind(this, \"eyesSrc\")}/></li>\r\n                <div>\r\n                  <button onClick={() => { this.setState({imageSourceType: \"file\"}) }}>File</button>\r\n                  &nbsp;\r\n                  <button onClick={() => { this.setState({imageSourceType: \"url\"}) }}>Url</button>\r\n                </div>\r\n              </ul>\r\n            <div>\r\n              <img src={this.state.eyesSrc} style={{maxHeight:100}}/>\r\n            </div>\r\n          </div>\r\n          \r\n          <div style={{padding: \"50px\"}}>\r\n              X Offset: {this.state.xOffset}%<br/>\r\n              <Slider axis=\"x\" x={this.state.xOffset} xmin={0} xmax={100} onChange={({x}) => this.setState({xOffset:x})}/><br/>\r\n              Y Offset: {this.state.yOffset}%<br/>\r\n              <Slider axis=\"x\" x={this.state.yOffset} xmin={-100} xmax={100} onChange={({x}) => this.setState({yOffset:x})}/><br/>\r\n              Scale Factor: {this.state.scaleFactor}%<br/>\r\n              <Slider axis=\"x\" x={this.state.scaleFactor} xmin={0} xmax={100} onChange={({x}) => this.setState({scaleFactor:x})}/><br/>\r\n              Rotation:  {this.state.rotation}&deg;<br/>\r\n              <Slider axis=\"x\" x={this.state.rotation} xmin={-45} xmax={45} onChange={({x}) => this.setState({rotation:x})}/><br/>\r\n              Mirror Right Eye: <input type=\"checkbox\" onChange={(e) => this.setState({mirrorRightEye:e.target.checked})}/><br/>\r\n              Mirror Left Eye: <input type=\"checkbox\" onChange={(e) => this.setState({mirrorLeftEye:e.target.checked})}/><br/>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          Choose a background image:<br/>\r\n          <ImagePicker\r\n            images={images.map((image, i) => ({src: image, value: i}))}\r\n            onPick={ (image) => {\r\n              this.setState({backgroundImage:image.src});\r\n            }}/>\r\n        </div>\r\n        <div>\r\n          Or choose a custom image:\r\n          <input type=\"file\" onChange={this.onSelectBGFile} style={{alignSelf:'top'}}/>\r\n        </div>\r\n        <div class=\"App\">\r\n            <div>At Reaction Workflow<br/>\r\n              <CanvasAtReaction\r\n                backgroundImage={this.state.atReactionSrc}\r\n                aspectRatio={this.state.atReactionAspectRatio}\r\n              />\r\n            </div>\r\n            <input type={this.state.imageSourceType} onChange={this.onSelectImage.bind(this, \"atReactionSrc\")} style={{alignSelf:'top'}}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}